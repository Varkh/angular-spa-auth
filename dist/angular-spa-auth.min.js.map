{"version":3,"sources":["../src/angular-spa-auth.js"],"names":["MESSAGES","UNAUTHORIZED_REDIRECT_TO_LOGIN","MISSING_CURRENT_USER_ENDPOINT","MISSING_LOGIN_ENDPOINT","SUCCESS_AUTH","ERROR_OCCURS","CANNOT_OVERRIDE_CORE","angular","module","run","$rootScope","$location","$timeout","AuthService","saveTarget","$on","event","next","isAuthenticated","console","info","path","$$route","isPublic","originalPath","preventDefault","openLogin","service","$q","$http","message","config","verbose","goTo","route","endpoints","get","then","response","data","reject","resolve","init","refreshCurrentUser","handlers","success","error","uiRoutes","login","publicUrls","currentUser","logout","home","target","getHomePage","user","getUser","Error","JSON","stringify","credentials","post","err","mixins","url","some","publicUrl","indexOf","openTarget","clearTarget","openHome","getCurrentUser","configuration","merge","prop","hasOwnProperty"],"mappings":"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","file":"angular-spa-auth.min.js","sourcesContent":["'use strict';\n(function () {\n\n    var MESSAGES = {\n        UNAUTHORIZED_REDIRECT_TO_LOGIN: 'Unauthorized: redirecting to the login page',\n        MISSING_CURRENT_USER_ENDPOINT: 'Endpoint for current user is not specified',\n        MISSING_LOGIN_ENDPOINT: 'Login endpoint is not specified',\n        SUCCESS_AUTH: 'Successfully authenticated',\n        ERROR_OCCURS: 'Error occurs',\n        CANNOT_OVERRIDE_CORE: 'You cannot override core service methods. Please use handlers to customize your auth process: '\n    };\n\n    angular.module('angular-spa-auth', ['ngRoute'])\n        .run(['$rootScope', '$location', '$timeout', 'AuthService', function ($rootScope, $location, $timeout, AuthService) {\n            AuthService.saveTarget();\n            $rootScope.$on('$routeChangeStart', function (event, next) {\n                // if not logged yet then save target route\n                if ((!AuthService.isAuthenticated())) {\n                    if (next.$$route && !AuthService.isPublic(next.$$route.originalPath)) {\n                        event.preventDefault();\n                        $timeout(function () {\n                            console.info(MESSAGES.UNAUTHORIZED_REDIRECT_TO_LOGIN);\n                            AuthService.openLogin();\n                        });\n                    }\n                } else {\n                    console.info('Loading ' + $location.path());\n                }\n            });\n        }])\n        .service('AuthService', ['$rootScope', '$q', '$http', '$location', function ($rootScope, $q, $http, $location) {\n\n            // ------------------------------------------------------------------------/// Config\n            var config = {\n                verbose: false,\n                publicUrls: ['/login', '/home'],\n                endpoints: {\n                    isAuthenticated: null,\n                    currentUser: null,\n                    logout: '/logout',\n                    login: '/login'\n                },\n                uiRoutes: {\n                    login: '/login',\n                    home: '/home',\n                    target: null\n                },\n                handlers: {\n                    /**\n                     * Returns url of home page as a string\n                     * @param {Object} user authenticated user\n                     * @returns {string} url to the default/home page\n                     */\n                    getHomePage: function(user) {\n                        return config.uiRoutes.home;\n                    },\n\n                    /**\n                     * Returns promise of GET request which should get current user from backend\n                     * @returns {Promise}\n                     */\n                    getUser: function () {\n                        if(!config.endpoints.currentUser) {\n                            throw new Error(MESSAGES.MISSING_CURRENT_USER_ENDPOINT)\n                        }\n\n                        return $http.get(config.endpoints.currentUser).then(function (response) {\n                            info('current user: ' + JSON.stringify(response.data));\n                            return response.data\n                        })\n                    },\n\n                    /**\n                     * Tries to login user using provided credentials.\n                     * Sends GET request\n                     *\n                     * @param {Object} credentials object with user credentials\n                     * @param {String} [credentials.login]\n                     * @param {String} [credentials.password]\n                     * @returns {Promise}\n                     */\n                    login: function (credentials) {\n                        if(!config.endpoints.login) {\n                            throw new Error(MESSAGES.MISSING_LOGIN_ENDPOINT)\n                        }\n\n                        return $http.post(config.endpoints.login, credentials)\n                    },\n\n                    /**\n                     * Success handler\n                     * @param {*} data received from backend\n                     */\n                    success: function (data) {\n                        info(MESSAGES.SUCCESS_AUTH)\n                    },\n\n                    /**\n                     * Error handler\n                     * @param {*} err backend error object\n                     */\n                    error: function (err) {\n                        if(config.verbose) {\n                            console.error(MESSAGES.ERROR_OCCURS, err)\n                        }\n                    }\n                },\n                mixins: {}\n            };\n\n            // ------------------------------------------------------------------------/// Private\n            function info(message) {\n                if(config.verbose) {\n                    console.info(message)\n                }\n            }\n\n            function goTo(route) {\n                $location.path(route);\n            }\n\n            function isAuthenticated() {\n                if (!config.endpoints.isAuthenticated) {\n                    return $q(function (resolve, reject) {\n                        resolve(true)\n                    });\n                }\n\n                return $http.get(config.endpoints.isAuthenticated).then(function (response) {\n                    info('isAuthenticated: ' + response.data);\n                    return response.data ? response.data : $q.reject(response.data);\n                });\n            }\n\n            function init() {\n                isAuthenticated().then(function () {\n                    service.refreshCurrentUser()\n                        .then(config.handlers.success, config.handlers.error)\n                        .catch(openLogin);\n                })\n            }\n\n            function openLogin() {\n                goTo(config.uiRoutes.login);\n            }\n\n            // ------------------------------------------------------------------------/// Public\n            var service = {\n                /**\n                 * Returns true if provide route url is in the list of public urls\n                 * @param {String} url route path that should be checked\n                 * @returns {boolean} true if url is in the list of public urls\n                 */\n                isPublic: function (url) {\n                    return config.publicUrls.some(function (publicUrl) {\n                        return url.indexOf(publicUrl) > -1;\n                    });\n                },\n                /**\n                 * Saves current route as a target route\n                 */\n                saveTarget: function () {\n                    config.uiRoutes.target = $location.path();\n                    info('Target route is saved: ' + config.uiRoutes.target);\n                },\n                /**\n                 * Redirects user to the saved target route if exists or to the home page\n                 */\n                openTarget: function () {\n                    config.uiRoutes.target = config.uiRoutes.target || config.handlers.getHomePage($rootScope.currentUser);\n                    goTo(config.uiRoutes.target);\n                    info('Redirected to the target route: ' + config.uiRoutes.target);\n                    service.clearTarget()\n                },\n                /**\n                 * Clears saved target route\n                 */\n                clearTarget: function () {\n                    config.uiRoutes.target = null;\n                },\n                /**\n                 * Redirects user to the login page\n                 */\n                openLogin: openLogin,\n                /**\n                 * Redirects user to the home page\n                 */\n                openHome: function () {\n                    goTo(config.handlers.getHomePage($rootScope.currentUser));\n                },\n                /**\n                 * Returns saved current user or load it from backed\n                 * Always returns {Promise}\n                 * @returns {Promise}\n                 */\n                getCurrentUser: function () {\n                    return $rootScope.currentUser ? $rootScope.currentUser : service.refreshCurrentUser();\n                },\n                /**\n                 * Loads user from backed using currentUser endpoint or getUser handler\n                 * Always returns {Promise}\n                 * @returns {Promise}\n                 */\n                refreshCurrentUser: function() {\n                    return config.handlers.getUser().then(function (user) {\n                        $rootScope.currentUser = user;\n                        service.openTarget();\n                        return user;\n                    })\n                },\n                /**\n                 * Returns true if user is authenticated\n                 * Warning! It does not check backend.\n                 * @returns {boolean} true if user is authenticated\n                 */\n                isAuthenticated: function () {\n                    return !!$rootScope.currentUser;\n                },\n                /**\n                 * Logs user out from the system and redirects it to the login page\n                 */\n                logout: function () {\n                    $http.get(config.endpoints.logout).then(function () {\n                        $rootScope.currentUser = null;\n                        openLogin();\n                    });\n                },\n                /**\n                 * Allows you to configure angular-spa-auth module and start the init process.\n                 * Should be called in the #run method of you module\n                 * @param {Object} configuration contains all the configs\n                 * @param {String=} configuration.verbose activates console.info output if true\n                 * @param {String[]=} configuration.publicUrls list url that are available for unauthorized users\n                 * @param {Object=} configuration.endpoints gives you ability to setup all the backed endpoints that will own roles in the authentication process\n                 * @param {Object=} configuration.uiRoutes helps you automatically redirect user to the specified UI routes such as home and login\n                 * @param {String=} configuration.uiRoutes.home home route\n                 * @param {String=} configuration.uiRoutes.login login route\n                 * @param {Object=} configuration.handlers allows you to provide you implementation for key methods of authentication process\n                 * @param {Object=} configuration.mixins allows you to extend AuthService\n                 */\n                run: function (configuration) {\n                    if (configuration) {\n                        config = angular.merge(config, configuration);\n\n                        if (configuration.mixins) {\n                            for(var prop in configuration.mixins) {\n                                if(service.hasOwnProperty(prop)){\n                                    throw new Error(MESSAGES.CANNOT_OVERRIDE_CORE + prop)\n                                }\n                            }\n\n                            angular.merge(service, configuration.mixins);\n                        }\n                    }\n                    init()\n                },\n                /**\n                 * Login user using provided credentials\n                 * @param {Object} credentials object with any type of information that is needed to compelete authentication process\n                 */\n                login: function (credentials) {\n                    config.handlers.login(credentials)\n                        .then(service.refreshCurrentUser())\n                        .then(config.handlers.success)\n                        .catch(config.handlers.error);\n                }\n            };\n\n            return service\n        }]);\n})();"]}